package com.akhm.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.akhm.command.ChangePasswordCommand;
import com.akhm.command.PropertyCommand;
import com.akhm.command.UserCommand;
import com.akhm.service.PropertiesService;
import com.akhm.service.UserService;
import com.akhm.service.dto.PropertyDTO;
import com.akhm.service.dto.UserDTO;
import com.akhm.util.EmailUtils;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class RentalController {

	@Autowired
	private UserService userService;

	@Autowired
	private PropertiesService propertyService;

	@Autowired
	private EmailUtils emailUtils;

	@GetMapping("/userregistration")
	public String showRegistration() {

		log.info("In RentalController....showregistration() method Started");
		return "registration";

	}

	@PostMapping("/userregistration")
	public String submitRegistration(UserCommand userCommand, HttpServletRequest request) {

		log.info("In RentalController....submitregistration() method Started");
		try {
			log.info("In RentalController....submitregistration() details are successfully register");
			UserDTO userDTO = new UserDTO();
			userDTO.setFullName(userCommand.getFullName());
			userDTO.setEmailId(userCommand.getEmailId());
			userDTO.setMobileNumber(userCommand.getMobileNumber());
			userDTO.setPassword(userCommand.getPassword());
			userDTO.setStatus(userCommand.getStatus());
			UserDTO user = userService.insertUser(userDTO);

			if (user != null) {

				return "redirect:userlogin";

			}

		} catch (Exception e) {
			log.info("In RentalController....submitregistration() method errormessage accured-{}", e);
			request.setAttribute("errormessage", "registrationfailed");
		}

		return "registration";

	}

	@GetMapping("/userlogin")
	public String showLogin() {
		return "login";

	}

	@PostMapping("/userlogin")
	public String submitLogin(UserCommand userCommand, HttpServletRequest request) {
		log.info("In RentalController....submitLogin() method Started");
		try {
			log.info("In RentalController....submitLogin() method details are register");

			UserDTO userDTO = new UserDTO();

			userDTO.setEmailId(userCommand.getEmailId());
			userDTO.setPassword(userCommand.getPassword());

			UserDTO user = userService.getUser(userDTO);
			if (user != null) {

				HttpSession session = request.getSession(true);
				session.setAttribute("AUTH_USER", user);

				return "redirect:userhome";

			} else {
				request.setAttribute("errormessage", "InvalidUserNameAndPassword");
			}

		} catch (Exception e) {

			log.info("In RentalController....submitLogin() method errormesage accured-{}", e);
			request.setAttribute("errormessage", "LoginFailed");
		}

		return "login";
	}

	/*
	 * @GetMapping("/userhome") public String userSucces() { return "userhome"; }
	 */

	@GetMapping("/userhome")
	public String userHome(HttpServletRequest request) {

		HttpSession session = request.getSession(false);

		if (session != null) {
			UserDTO user = (UserDTO) session.getAttribute("AUTH_USER");
			if (user != null) {

				return "userhome";
			} else {
				return "redirect:userlogin?errormessage=unauthriseduser";
			}

		} else {
			return "redirect:userlogin?errormessage=sessionexpired";
		}

	}

	@GetMapping("/logout")
	public String userLogout(HttpServletRequest request) {

		HttpSession session = request.getSession(false);

		if (session != null) {
			session.invalidate();

			return "redirect:userlogin?sucessmessge=yoursuccessfullylogout";
		} else {
			return "redirect:userlogin?errormessage=sessionexpired";
		}

	}

	@GetMapping("/editprofile")
	public String editProfile(HttpServletRequest request) {
		HttpSession session = request.getSession(false);

		if (session != null) {
			UserDTO user = (UserDTO) session.getAttribute("AUTH_USER");
			if (user != null) {

				return "editprofile";
			} else {
				return "redirect:userlogin?errormessage=unauthriseduser";
			}

		} else {
			return "redirect:userlogin?errormessage=sessionexpired";
		}

	}

	@PostMapping("/editprofile")
	public String submitEditProfile(HttpServletRequest request, UserCommand userCommand) {
		HttpSession session = request.getSession(false);

		if (session != null) {
			UserDTO user = (UserDTO) session.getAttribute("AUTH_USER");
			if (user != null) {

				user.setFullName(userCommand.getFullName());
				user.setMobileNumber(userCommand.getMobileNumber());
				try {
					UserDTO _user = userService.updateUser(user);
					if (_user != null) {
						return "redirect:userhome";
					}

				} catch (Exception e) {

					request.setAttribute("errormessage", "profileupdatefailed");
				}
				return "editprofile";
			} else {
				return "redirect:userlogin?errormessage=unauthriseduser";
			}

		} else {
			return "redirect:userlogin?errormessage=sessionexpired";
		}

	}

	@GetMapping("/changepassword")
	public String changePassword(HttpServletRequest request) {
		HttpSession session = request.getSession(false);

		if (session != null) {
			UserDTO user = (UserDTO) session.getAttribute("AUTH_USER");
			if (user != null) {

				return "changepassword";
			} else {
				return "redirect:userlogin?errormessage=unauthriseduser";
			}

		} else {
			return "redirect:userlogin?errormessage=sessionexpired";
		}
	}

	@PostMapping("/changepassword")
	public String submitChangePassword(HttpServletRequest request, ChangePasswordCommand changePasswordCommand) {
		HttpSession session = request.getSession(false);

		if (session != null) {
			UserDTO user = (UserDTO) session.getAttribute("AUTH_USER");
			if (user != null) {

				if (user.getPassword().equals(changePasswordCommand.getOldpassword())) {
					if (changePasswordCommand.getNewpassword().equals(changePasswordCommand.getConfirmpassword())) {

						user.setPassword(changePasswordCommand.getNewpassword());
						try {

							UserDTO _user = userService.updateUser(user);
							if (_user != null) {
								return "redirect:userhome";

							} else {
								request.setAttribute("errormessage", "changepasswordfailed");
							}

						} catch (Exception e) {

							request.setAttribute("errormessage", "changepasswordfailed");
						}

					} else {
						request.setAttribute("errormessage", "newpasswordandconfirmpasswordnotmatched");
					}

				} else {
					request.setAttribute("errormessage", "invalidoldpassword");
				}

				return "changepassword";
			} else {
				return "redirect:userlogin?errormessage=unauthriseduser";
			}

		} else {
			return "redirect:userlogin?errormessage=sessionexpired";
		}

	}

	@GetMapping("/addproperty")
	public String showAddProperty(HttpServletRequest request) {
		log.info("in RenatalControll...showAddproperty methdo() started");
		HttpSession session = request.getSession(false);

		if (session != null) {
			log.info("in RenatalControll...showAddproperty methdo() deeatils are saved");
			UserDTO user = (UserDTO) session.getAttribute("AUTH_USER");
			if (user != null) {

				return "addproperty";
			} else {
				return "redirect:userlogin?errormessage=unauthriseduser";
			}

		} else {
			return "redirect:userlogin?errormessage=sessionexpired";
		}

	}

	@PostMapping("/addproperty")
	public String submitAddProperty(HttpServletRequest request, PropertyCommand propertyCommand) {
		log.info("in RenatalControll...submitAddproperty methdo() started");
		HttpSession session = request.getSession(false);

		if (session != null) {
			log.info("in RenatalControll...submitAddproperty methdo() deeatils are saved");
			UserDTO user = (UserDTO) session.getAttribute("AUTH_USER");
			if (user != null) {

				try {

					PropertyDTO propertyDTO = new PropertyDTO();
					propertyDTO.setPropertyType(propertyCommand.getPropertytype());
					propertyDTO.setHouseNumber(propertyCommand.getHousenumber());
					propertyDTO.setAddress(propertyDTO.getAddress());
					propertyDTO.setCity(propertyCommand.getCity());
					propertyDTO.setState(propertyCommand.getState());
					propertyDTO.setPincode(propertyCommand.getPincode());
					propertyDTO.setPropertyCreatedBy(user.getUserId());
					propertyDTO.setStatus("Active");
					propertyDTO.setCreatedOn(new java.sql.Date(new java.util.Date().getTime()));
					PropertyDTO property = propertyService.saveProperty(propertyDTO);

					if (property != null) {

						return "redirect:properties";
					} else {
						request.setAttribute("errormessage", "propertyinsertionfailed");
					}
				} catch (Exception e) {
					// TODO: handle exception
					request.setAttribute("errormessage", "propertyinsertionfailed");
					log.error("in RenatalControll...submitAddproperty methdo() error accured", e);
					e.printStackTrace();

				}

				return "addproperty";
			} else {
				return "redirect:userlogin?errormessage=unauthriseduser";
			}

		} else {
			return "redirect:userlogin?errormessage=sessionexpired";
		}

	}

	/*
	 * @GetMapping("/properties") public String addSccess() { return "properties"; }
	 */

	@GetMapping("return")
	public String returnHome() {
		return "userhome";

	}

	@GetMapping("/properties")
	public String getProperties(HttpServletRequest request) {
		HttpSession session = request.getSession(false);

		if (session != null) {
			UserDTO user = (UserDTO) session.getAttribute("AUTH_USER");
			if (user != null) {

				List<PropertyDTO> properties = propertyService.getProperties(user.getUserId());
				request.setAttribute("properties", properties);

				return "properties";
			} else {
				return "redirect:userlogin?errormessage=unauthriseduser";
			}

		} else {
			return "redirect:userlogin?errormessage=sessionexpired";
		}
	}

	@GetMapping("/editproperty")
	public String getProperty(HttpServletRequest request) {
		HttpSession session = request.getSession(false);

		if (session != null) {
			UserDTO user = (UserDTO) session.getAttribute("AUTH_USER");
			if (user != null) {

				PropertyDTO property = propertyService.getProperty(Integer.valueOf(request.getParameter("propertyId")));
				request.setAttribute("property", property);

				return "editproperty";
			} else {
				return "redirect:userlogin?errormessage=unauthriseduser";
			}

		} else {
			return "redirect:userlogin?errormessage=sessionexpired";
		}
	}

	@PostMapping("/editproperty")
	public String submitEditProperty(HttpServletRequest request, PropertyCommand propertyCommand) {
		log.info("in RenatalControll...submitAddproperty methdo() started");
		HttpSession session = request.getSession(false);

		if (session != null) {
			log.info("in RenatalControll...submitAddproperty methdo() deeatils are saved");
			UserDTO user = (UserDTO) session.getAttribute("AUTH_USER");
			if (user != null) {

				try {

					PropertyDTO propertyDTO = propertyService.getProperty(propertyCommand.getPropertyId());
					propertyDTO.setPropertyType(propertyCommand.getPropertytype());
					propertyDTO.setHouseNumber(propertyCommand.getHousenumber());
					propertyDTO.setAddress(propertyDTO.getAddress());
					propertyDTO.setCity(propertyCommand.getCity());
					propertyDTO.setState(propertyCommand.getState());
					propertyDTO.setPincode(propertyCommand.getPincode());
					propertyService.updateProperty(propertyDTO);
					return "redirect:properties";

				} catch (Exception e) {
					// TODO: handle exception
					request.setAttribute("errormessage", "propertyinsertionfailed");
					log.error("in RenatalControll...submitAddproperty methdo() error accured", e);
					e.printStackTrace();

				}

				return "redirect:editproperty?propertyId=" + propertyCommand.getPropertyId();
			} else {
				return "redirect:userlogin?errormessage=unauthriseduser";
			}

		} else {
			return "redirect:userlogin?errormessage=sessionexpired";
		}

	}

	@GetMapping("/deleteproperty/{Id}")
	public String deleteProperty(HttpServletRequest request, @PathVariable("Id") Integer propertyId) {

		HttpSession session = request.getSession(false);

		if (session != null) {
			UserDTO user = (UserDTO) session.getAttribute("AUTH_USER");
			if (user != null) {

				propertyService.deleteProperty(propertyId);

				return "redirect:/properties";
			} else {
				return "redirect:userlogin?errormessage=unauthriseduser";
			}

		} else {
			return "redirect:userlogin?errormessage=sessionexpired";
		}

	}

	@GetMapping("/forgetpassword")
	public String showForgetPassword() {

		return "forgetpassword";
	}

	@PostMapping("/submitforgetpassword")
	public String submitForgetPassword(HttpServletRequest request) {
		String emailId = request.getParameter("emailId");
		UserDTO userDTO = userService.getUser(emailId);
		if (userDTO != null) {
			String password = userDTO.getPassword();
			String subject = "yourpassworddetailsare";
			String to = userDTO.getEmailId();
			String body = "dear user,\n password is " + password;
			String emailMessage=emailUtils.sendEmail("praveensonu1999@gmail.com",to,subject,body);
			
			if (emailMessage !=null && emailMessage.equalsIgnoreCase("mailsentsuccessfully")) 
			{
				
				return "forgetpasswordsuccess";
				
				
				
			}	
			
		} else {
			
			   return "forgetpasswordfail";
			   }
		return "forgetpassword";

	}

}
